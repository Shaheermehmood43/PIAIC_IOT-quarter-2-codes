struct Point {
    x: f64,
    y: f64,
}

// Implementation block, all `Point` methods go in here
impl Point {
    // This is a static method
    // Static methods don't need to be called by an instance
    // These methods are generally used as constructors
    fn origin() -> Point {
        Point { x: 0.0, y: 0.0 }
    }

    // Another static method, taking two arguments:
    fn new(x: f64, y: f64) -> Point {
        Point { x: x, y: y }
    }
}

struct Rectangle {
    p1: Point,
    p2: Point,
}

impl Rectangle {
    // This is an instance method
    // `&self` is sugar for `self: &Self`, where `Self` is the type of the
    // caller object. In this case `Self` = `Rectangle`
    fn area(&self) -> f64 {
        // `self` gives access to the struct fields via the dot operator
        let Point { x: x1, y: y1 } = self.p1;
        let Point { x: x2, y: y2 } = self.p2;

        // `abs` is a `f64` method that returns the absolute value of the
        // caller
        ((x1 - x2) * (y1 - y2)).abs()
    }

    fn perimeter(&self) -> f64 {
        let Point { x: x1, y: y1 } = self.p1;
        let Point { x: x2, y: y2 } = self.p2;

        2.0 * ((x1 - x2).abs() + (y1 - y2).abs())
    }

    // This method requires the caller object to be mutable
    // `&mut self` desugars to `self: &mut Self`
    fn translate(&mut self, x: f64, y: f64) {
        self.p1.x += x;
        self.p2.x += x;

        self.p1.y += y;
        self.p2.y += y;
    }
}

// `Pair` owns resources: two heap allocated integers
struct Pair(Box<i32>, Box<i32>);

impl Pair {
    // This method "consumes" the resources of the caller object
    // `self` desugars to `self: Self`
    fn destroy(self) {
        // Destructure `self`
        let Pair(first, second) = self;

        println!("Destroying Pair({}, {})", first, second);

        // `first` and `second` go out of scope and get freed
    }
}

fn main() {
    let rectangle = Rectangle {
        // Static methods are called using double colons
        p1: Point::origin(),
        p2: Point::new(3.0, 4.0),
    };
    
    println!("Rectangle perimeter: {}", rectangle.perimeter());
    println!("Rectangle area: {}", rectangle.area());

    let mut square = Rectangle {
        p1: Point::origin(),
        p2: Point::new(1.0, 1.0),
    };

    square.translate(1.0, 1.0);

    let pair = Pair(Box::new(1), Box::new(2));

    pair.destroy();

}


X---------------------------------X




#[derive(Debug)]

struct Student{

    name : String,
    age:    u8,
    address : String


}
impl Student{


   pub fn create_student(n:String,a:u8,add:String)->Student
    {

        Student{
            name:n,
            age:a,
            address:add
        }
    }
    fn view_student(&self){
        let info_student = format!("Name:{}\nAge:{}\nAddress:{}\n",self.name,self.age,self.address);
        
    }
}


fn main() {

    let student_01 = Student::create_student("Haris".to_string(), 20, "f.b area".to_string());

    println!("{:?}",student_01);
    println!("{:?}",student_01.view_student());
    let student_02=Student::create_student("shaheer".to_string(),19,"johar".to_string());
    println!("{:?}",student_02);
    println!("{:?}",student_02.view_student());
}

X___________________________X
#[derive(Debug)]

struct Student{

    name : String,
    age:    u8,
    address : String


}
impl Student{

  pub  fn create_student(n:String,a:u8,add:String)->Student
    {

        Student{
            name:n,
            age:a,
            address:add 
        }
    }

    fn view_student(&self)->String
    {
        let info_Studet = format!("Name: {}\nAge:  {}\nAddress: {} ",self.name,self.age,self.address);
        
        info_Studet

    }
}
pub trait information {
    fn only_first_name(&self)->String{
        "hi".to_string()
    }
}
impl information for Student{
    fn only_first_name (&self)-> String{
        let fir = format!(
            "Name:{}",
            self.name,
        );
   fir.to_string()
    }
}
fn main() {

    let student_01 = Student::create_student("Hasaan".to_string(), 19, "m.hasaan1999@gmail.com".to_string());

    student_01.view_student();
    println!("{:?}",student_01);
    println!("{}",student_01.view_student() );
    let student_02=Student{
        name:"Hasnain".to_string(),
        age:19,
        address:"hasnainyousuf112@gmail.com".to_string()
    };
    println!("{}",student_02.view_student() );
 
        }